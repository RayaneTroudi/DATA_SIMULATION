import numpy as np
from scipy.stats import chi2_contingency

# ______________ HYPOTHESIS TESTING ______________ 
# H0 = randoms variables X and Y are independants (generated by Box-Muller transformation)
# H1 = randoms variables X and Y are not independants (generated by Box-Muller transformation)



#number of randoms values
N = 1000

#create sample of uniform distribution
U1 = np.random.uniform(0,1,N)
U2 = np.random.uniform(0,1,N)

#create sample of gaussien distribution N(0,1) by Box-Muller transform
x = np.sqrt(-2.0*np.log(U1))*np.cos(2.0*np.pi*U2)
y = np.sqrt(-2.0*np.log(U1))*np.sin(2.0*np.pi*U2)


# number of class for independancy Khi2 test
k = int(np.floor(1 + np.log2(N))+1)

#to avoid problem in extremities (a random value equal to an extremity)
epsilon = 1e-3

#create interval
x_bins = np.linspace(x.min()-epsilon, x.max()+epsilon, k+1)
y_bins = np.linspace(y.min()-epsilon, y.max()+epsilon, k+1)

#renvoie un tableau d'incide, chaque indice i correpond Ã  la classe au quel apprtient la valeur x du tableau
# return array index, each index links to the corresponding bins (ex : first index is link to the first value of x in array x)
x_digitized = np.digitize(x, x_bins) - 1

y_digitized = np.digitize(y, y_bins) - 1

#initialization of contingency table
contingency_table = np.zeros((k, k), dtype=int)

#on range les valeurs
for i in range(N):
    contingency_table[x_digitized[i], y_digitized[i]] += 1
print()
print(" _______________________ CLASSES BINS _______________________")
print()
print("-> For x : ",x_bins)
print()
print("-> For y : ",y_bins)
print()
print("_______________________ Contingency Table _______________________")
print()
print(contingency_table)
print()
print("_______________________ DATAS OF TESTS _______________________ ")
print()


# Use chi2_contingency of SciPy library to compute the chi2-test
chi2, p, _, expected = chi2_contingency(contingency_table)

print("-> Chi2 Statistique = ", round(chi2,4))
print("-> P-value of test = ", round(p,4))

# make the decision test
alpha = 0.05
if p < alpha:
    print("-> alpha = ",alpha)
    print("-> Reject of H0 : X and Y aren't independent")
else:
    print("-> alpha = ",alpha)
    print("-> Failure to reject H0 : X and Y generated by BoxMuller Method are independent.")

V = np.sqrt(chi2/(N*np.minimum(k,k)))
print("-> Cramer's Coefficient = ", round(V,4))